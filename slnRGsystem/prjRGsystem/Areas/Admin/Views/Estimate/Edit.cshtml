@using prjRGsystem.Models.ViewModels;
@model EstimateViewModel

<!--LuckySheet-->
<link href="~/lib/luckysheet/css/luckysheet-pluginsCss.css" rel="stylesheet" />
<link href="~/lib/luckysheet/css/luckysheet-plugins.css" rel="stylesheet" />
<link href="~/lib/luckysheet/css/luckysheet.css" rel="stylesheet" />
<link href="~/lib/luckysheet/css/luckysheet-iconfont.css" rel="stylesheet" />
<script src="~/lib/luckysheet/js/plugin.js"></script>
<script src="~/lib/luckysheet/js/luckysheet.umd.js"></script>

<div id="editDiv">
    <div id="luckysheet" style="width: 100%; height: 600px;"></div>
    <input type="text" id="elsId" value="@(Model is not null &&Model.Estimate is not null ?Model.Estimate.id:0)" />
    <div class="margin-bottom-10 margin-top-10">
        <button id="saveImportEdit" class="awe-btn" type="button">√ 存檔</button>
        <button class="awe-btn" type="button">× 取消</button>
    </div>
</div>

<script>
    $(function () {

        const estimate = @Html.Raw(Json.Serialize(Model.Estimate));
        const estimateItems = @Html.Raw(Json.Serialize(Model.EstimateItems));
        const rc = @(Model.EstimateItems is not null ? Model.EstimateItems.Count : 0)+8;
        const totalQ = @(Model.EstimateItems is not null ? Model.EstimateItems.Sum(n => n.quantity) : 0);
        const totalpc = @(Model.EstimateItems is not null ? Model.EstimateItems.Sum(n => n.unitPrice) : 0);
        const dataM = [
            { r: 0, c: 1, v: { v: "榮記車業實際維修單", fs: 18, ht: 0, vt: 0 } },
            { r: 1, c: 1, v: { v: "車主", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 2, c: 1, v: { v: "車號", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 3, c: 1, v: { v: "引擎號碼", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 4, c: 1, v: { v: "品牌", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 1, c: 3, v: { v: "車種", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 2, c: 3, v: { v: "年份", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 3, c: 3, v: { v: "聯絡方式", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 4, c: 3, v: { v: "進廠日期", fs: 12, ht: 0, vt: 0, bl: 1 } }
        ];
        const formatDate = (dateStr, isAll) => {
            if (!dateStr) return '';
            const date = new Date(dateStr);
            const year = date.getFullYear();
            const month = date.getMonth() + 1;
            const day = date.getDate() + 1;
            if (!isAll) return `${year}/${month}`;
            else return `${year}/${month}/${day}`;
        };

        dataM.push(
            { r: 1, c: 2, v: { v: estimate.carOwner, fs: '12', ht: "0", vt: "0" } },
            { r: 2, c: 2, v: { v: estimate.carLicense, fs: '12', ht: "0", vt: "0" } },
            { r: 3, c: 2, v: { v: estimate.engineNum, fs: '12', ht: "0", vt: "0" } },
            { r: 4, c: 2, v: { v: estimate.brand, fs: '12', ht: "0", vt: "0" } },
            { r: 1, c: 4, v: { v: estimate.carCategory, fs: '12', ht: "0", vt: "0" } },
            { r: 2, c: 4, v: { v: formatDate(estimate.year, false), fs: '12', ht: "0", vt: "0" } },
            { r: 3, c: 4, v: { v: estimate.contact, fs: '12', ht: "0", vt: "0" } },
            { r: 4, c: 4, v: { v: formatDate(estimate.entryDate, true), fs: '12', ht: "0", vt: "0" } }
        );

        dataM.push(
            { r: 5, c: 1, v: { v: "項次", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 2, v: { v: "零件名稱", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 3, v: { v: "數量", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 4, v: { v: "單價", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 5, v: { v: "工資(時)", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 6, v: { v: "工時", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: 5, c: 7, v: { v: "工資加工時", fs: 12, ht: 0, vt: 0, bl: 1 } },
        );

        estimateItems.forEach((item, index) => {
            dataM.push(
                { r: index + 6, c: 0, v: { v: item.id.toString(), fs: 12, ht: 0, vt: 0, fc: "#ffffff" } },
                { r: index + 6, c: 1, v: { v: (index + 1).toString(), fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 2, v: { v: item.itemName, fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 3, v: { v: item.quantity.toString(), fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 4, v: { v: item.unitPrice.toString(), fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 5, v: { v: item.salary, fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 6, v: { v: item.hours, fs: 12, ht: 0, vt: 0 } },
                { r: index + 6, c: 7, v: { f: `=F${index + 7}*G${index + 7}`, fs: 12, ht: 0, vt: 0 } },
            );
        });

        dataM.push(
            { r: rc - 2, c: 1, v: { v: "技師", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 2, c: 2, v: { v: "店章", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 2, c: 3, v: { v: "零件數量", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 2, c: 4, v: { v: "總計", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 1, c: 1, v: { v: estimate.engineer, fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 1, c: 2, v: { v: "", fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 1, c: 3, v: { v: totalQ, fs: 12, ht: 0, vt: 0, bl: 1 } },
            { r: rc - 1, c: 4, v: { v: totalpc, fs: 12, ht: 0, vt: 0, bl: 1 } }
        );
        // 配置项
        let options = {
            container: 'luckysheet',
            lang: "zh_tw",
            showinfobar: false,
            showtoolbarConfig: {
                image: false, // '插入图片'
                splitColumn: false, // '分列'
            },
            showsheetbarConfig: {
                add: false, // 新增sheet
                menu: false, // sheet管理菜单
                sheet: true // sheet页显示
            },
            sheetRightClickConfig: {
                delete: false, // 删除
                copy: false, // 复制
                rename: false, // 重命名
                color: false, // 更改颜色
                hide: false, // 隐藏，取消隐藏
                move: false, // 向左移，向右移
            },
            cellRightClickConfig: {
                insertColumn: false, // 插入列
                deleteColumn: false, // 删除选中列
                hideRow: false, // 隐藏选中行和显示选中行
                hideColumn: false, // 隐藏选中列和显示选中列
                image: false, // 插入图片
                matrix: false, // 矩阵操作选区
            },
            enableAddBackTop: false,
            enableAddRow: false,            
            data: [
                {
                    name: '估價單',
                    index: 0,
                    status: 1,
                    order: 0,
                    row: rc,
                    column: 8,
                    celldata: dataM,
                    defaultRowHeight: 25, //自定义行高
                    defaultColWidth: 120,
                    config: {
                        merge: {
                            "0_1": {
                                "r": 0, //主单元格的行号
                                "c": 1, //主单元格的列号
                                "rs": 1, //合并单元格占的行数
                                "cs": 4 //合并单元格占的列数
                            },
                        },
                        rowlen: {
                            0: 55,
                            [rc - 1]: 130,
                        },
                        columnlen: {
                            0: 30,
                            2: 180
                        },
                        borderInfo: [
                            {
                                rangeType: "range",
                                borderType: "border-all",
                                style: "1",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [1, rc - 1],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-top",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [1, 2],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-bottom",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [1, 2],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-top",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [5, 5],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-bottom",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [5, 5],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-top",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [rc - 2, rc - 2],
                                    column: [1, 4]
                                }]
                            },
                            {
                                rangeType: "range",
                                borderType: "border-bottom",
                                style: "13",
                                color: "rgb(0, 0, 0)",
                                range: [{
                                    row: [rc - 2, rc - 2],
                                    column: [1, 4]
                                }]
                            }
                        ],
                    }
                }
            ],
        };

        luckysheet.create(options);
        // 插入圖片的設定
        //const imageSrc = '/img/RGCMPID_processed2.jpg'; // 圖片路徑
        //luckysheet.insertImage(imageSrc, {
        //    rowIndex: rc - 2, // 插入圖片的行位置
        //    colIndex: 1, // 插入圖片的列位置
        //});
        //setTimeout(function () {
        //    const imgElement = $('img[src="/img/RGCMPID_processed2.jpg"]');
        //    if (imgElement.length > 0) {
        //        imgElement.css('width', '160px');
        //        imgElement.css('height', '120px');
        //    }
        //}, 300);  // 延时 500ms 确保图片加载完成

        $("#saveImportEdit").on("click", function () {
            $("#editDiv").block({
                message: '<h1>資料處理中, 請稍候...</h1>',
                css: {
                    border: 'none',
                    //padding: '15px',
                    backgroundColor: '#000',
                    '-webkit-border-radius': '10px',
                    '-moz-border-radius': '10px',
                    opacity: .5,
                    color: '#fff',
                }
            });

            saveImportEdit();
        });
    });

    function saveImportEdit() {

        let sheet = luckysheet.getAllSheets();
        let elsId = $("#elsId").val();
        let s1 = sheet[0].data.filter(subArray => subArray[0] !== null);

        let j1 = s1.map(row =>
            row.map(cell => cell && cell.m ? cell.m : "")
        );

        let obj = { "data": j1 };

        console.log(JSON.stringify(obj));

        $.ajax({
            type: "POST",
            url: "@Url.Action("Save")",
            data: { "id": elsId, "data": JSON.stringify(obj) },
            success: function (response) {
                if (response.success) {
                    //toastr.success(response.responseText);
                    //setTimeout(() => {
                    //    window.location.replace("@Url.Action("Index")")
                    //}, 1500);
                } else {
                    //toastr.warning(response.responseText);
                }
            },
            //error: function (xhr, status) {
            //    toastr.error(xhr.responseText, '發生錯誤', { positionClass: "toast-top-full-width", closeButton: true, timeOut: 0 });
            //},
            complete: function () {
                unblockEdit();
            }
        });
    }

    function closeEdit() {
        window.location.replace("@Url.Action("Index")");
    }

    function unblockEdit() {
        $("#editDiv").unblock();
    }
</script>